name: CICD Admin

on:
  push:
    branches:
    - dev

env:
  BRANCH: dev
  AWS_REGION: us-east-1

  GH_ADMIN_USER_NAME_PARAMETER: AP_GH_ADMIN_USER_NAME 
  GH_ADMIN_USER_EMAIL_PARAMETER: AP_GH_ADMIN_USER_EMAIL
  GH_ADMIN_TOKEN_PARAMETER: AP_GH_ADMIN_TOKEN

jobs:
  cicd-admin:
    if: ${{ github.actor == 'ronfontebo' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write                                                     # This is required for requesting the JWT (OIDC)
      contents: write
      pull-requests: write   
    steps:
      ###############################################################
      # CONFIGURE AWS CREDS
      ###############################################################    
      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AP_AWS_GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      ###############################################################
      # CHECK GH_ADMIN_USER_NAME
      ###############################################################
      - name: Check for GH_ADMIN_USER_NAME in AWS SSM Parameter Store
        id: check-gh-admin-user-name
        if: ${{ steps.configure-aws-credentials.outcome == 'success' }}
        run: |
          aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_USER_NAME_PARAMETER }}" \
            --query "Parameter.Value" \
            --no-with-decryption \
            --output text

          GH_ADMIN_USER_NAME_FOUND=$?

          if [[ $GH_ADMIN_USER_NAME_FOUND == '0' ]];
          then
            echo "GH_ADMIN_USER_NAME_FOUND=0" >> $GITHUB_ENV
          else
            echo "GH_ADMIN_USER_NAME_FOUND=1" >> $GITHUB_ENV

            echo "GH_ADMIN_USER_NAME not found."
          fi

      ###############################################################
      # GET GH_ADMIN_USER_NAME
      ###############################################################
      - name: Get GH_ADMIN_USER_NAME from AWS SSM Parameter Store
        id: get-gh-admin-user-name
        if: ${{ steps.check-gh-admin-user-name.outcome == 'success' && env.GH_ADMIN_USER_NAME_FOUND == '0' }}
        run: |
          echo "::add-mask::$(aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_USER_NAME_PARAMETER }}" \
            --query "Parameter.Value" \
            --with-decryption \
            --output text)"
          
          echo "GH_ADMIN_USER_NAME=$(aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_USER_NAME_PARAMETER }}" \
            --query "Parameter.Value" \
            --with-decryption \
            --output text)" >> $GITHUB_ENV

      ###############################################################
      # CHECK GH_ADMIN_USER_EMAIL
      ###############################################################
      - name: Check for GH_ADMIN_USER_EMAIL in AWS SSM Parameter Store
        id: check-gh-admin-user-email
        if: ${{ steps.get-gh-admin-user-name.outcome == 'success' }}
        run: |
          aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_USER_EMAIL_PARAMETER }}" \
            --query "Parameter.Value" \
            --no-with-decryption \
            --output text

          GH_ADMIN_USER_EMAIL_FOUND=$?

          if [[ $GH_ADMIN_USER_EMAIL_FOUND == '0' ]];
          then
            echo "GH_ADMIN_USER_EMAIL_FOUND=0" >> $GITHUB_ENV
          else
            echo "GH_ADMIN_USER_EMAIL_FOUND=1" >> $GITHUB_ENV

            echo "GH_ADMIN_USER_EMAIL not found."
          fi

      ###############################################################
      # GET GH_ADMIN_USER_EMAIL
      ###############################################################
      - name: Get GH_ADMIN_USER_EMAIL from AWS SSM Parameter Store
        id: get-gh-admin-user-email
        if: ${{ steps.check-gh-admin-user-email.outcome == 'success' && env.GH_ADMIN_USER_EMAIL_FOUND == '0' }}
        run: |
          echo "::add-mask::$(aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_USER_EMAIL_PARAMETER }}" \
            --query "Parameter.Value" \
            --with-decryption \
            --output text)"
          
          echo "GH_ADMIN_USER_EMAIL=$(aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_USER_EMAIL_PARAMETER }}" \
            --query "Parameter.Value" \
            --with-decryption \
            --output text)" >> $GITHUB_ENV

      ###############################################################
      # CHECK GH_ADMIN_TOKEN
      ###############################################################
      - name: Check for GH_ADMIN_TOKEN in AWS SSM Parameter Store
        id: check-gh-admin-token
        if: ${{ steps.get-gh-admin-user-email.outcome == 'success' }}
        run: |
          aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_TOKEN_PARAMETER }}" \
            --query "Parameter.Value" \
            --no-with-decryption \
            --output text

          GH_ADMIN_TOKEN_FOUND=$?

          if [[ $GH_ADMIN_TOKEN_FOUND == '0' ]];
          then
            echo "GH_ADMIN_TOKEN_FOUND=0" >> $GITHUB_ENV
          else
            echo "GH_ADMIN_TOKEN_FOUND=1" >> $GITHUB_ENV

            echo "GH_ADMIN_TOKEN not found."
          fi

      ###############################################################
      # GET GH_ADMIN_TOKEN
      ###############################################################
      - name: Get GH_ADMIN_TOKEN from AWS SSM Parameter Store
        id: get-gh-admin-token
        if: ${{ steps.check-gh-admin-token.outcome == 'success' && env.GH_ADMIN_TOKEN_FOUND == '0' }}
        run: |
          echo "::add-mask::$(aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_TOKEN_PARAMETER }}" \
            --query "Parameter.Value" \
            --with-decryption \
            --output text)"
          
          echo "GH_ADMIN_TOKEN=$(aws ssm get-parameter \
            --region "${{ env.AWS_REGION }}" \
            --name "${{ env.GH_ADMIN_TOKEN_PARAMETER }}" \
            --query "Parameter.Value" \
            --with-decryption \
            --output text)" >> $GITHUB_ENV

      ###############################################################
      # CHECKOUT DEV BRANCH
      ###############################################################
      - name: Checkout Dev Branch
        id: checkout-dev-branch
        if: ${{ steps.get-gh-admin-token.outcome == 'success' }}
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      ###############################################################
      # GIT CONFIG USER DEV
      ############################################################### 
      - name: Git Config User Dev
        id: git-config-user-dev
        if: ${{ steps.checkout-dev-branch.outcome == 'success' }}
        run: |
          git config user.name ${{ env.GH_ADMIN_USER_NAME }}
          git config user.email ${{ env.GH_ADMIN_USER_EMAIL }}

      ###############################################################
      # GET COMMIT MSG 1
      ###############################################################
      - name: Get Commit Message 1
        id: get-commit-message-1
        if: ${{ steps.git-config-user-dev.outcome == 'success' }}  
        run: |
          echo "COMMIT_MESSAGE_1=$(echo \"${{ github.event.head_commit.message }}\")" >> $GITHUB_ENV

      ###############################################################
      # GET COMMIT MSG 2 & 3
      ###############################################################
      - name: Get commit message 2 and 3
        id: get-commit-message-2-and-3
        if: ${{ steps.get-commit-message-1.outcome == 'success' }}
        run: |
          echo "COMMIT_MESSAGE_2=${{ env.COMMIT_MESSAGE_1 }}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE_3=$(echo \"${{ env.COMMIT_MESSAGE_1 }}\")" >> $GITHUB_ENV

      ###############################################################
      # OPEN PR (GHA BOT)
      ###############################################################
      - name: Open PR
        id: open-pr
        if: ${{ steps.get-commit-message-2-and-3.outcome == 'success' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        run: |
          gh pr create \
            --head "${{ env.BRANCH }}" \
            --base "main" \
            --title ${{ env.COMMIT_MESSAGE_1 }} \
            --body ${{ env.COMMIT_MESSAGE_1 }}
          
      ###############################################################
      # AUTH GH CLI
      ###############################################################          
      - name: Authenticate GitHub CLI
        id: authenticate-github-cli
        if: ${{ steps.open-pr.outcome == 'success' }}
        run: |
          echo ${{ env.GH_ADMIN_TOKEN }} | gh auth login --with-token

      ###############################################################
      # MERGE PR (REPO ADMIN)
      ###############################################################
      - name: Merge PR
        id: merge-pr
        if: ${{ steps.authenticate-github-cli.outcome == 'success' }}
        run: |
          gh pr merge --merge

      ###############################################################
      # CHECKOUT MAIN BRANCH
      ###############################################################
      - name: Checkout Main Branch
        id: checkout-main-branch
        if: ${{ steps.merge-pr.outcome == 'success' }}
        uses: actions/checkout@v4        
        with:
          repository: ${{ github.repository }}
          ref: main
          fetch-depth: 0
          token: ${{ env.GH_ADMIN_TOKEN }}

      ###############################################################
      # GIT CONFIG USER MAIN
      ############################################################### 
      - name: Git Config User Main
        id: git-config-user-main
        if: ${{ steps.checkout-main-branch.outcome == 'success' }}
        run: |
          git config user.name ${{ env.GH_ADMIN_USER_NAME }}
          git config user.email ${{ env.GH_ADMIN_USER_EMAIL }}

      ###############################################################
      # DEFINE UPDATE TYPE
      ###############################################################           
      - name: Define Update Type
        id: define-update-type
        if: ${{ steps.git-config-user-main.outcome == 'success' }}
        run: |
          define_update_type() {
            echo "Commit Message: ${{ env.COMMIT_MESSAGE_2 }}"

            echo "${{ env.COMMIT_MESSAGE_2 }}" | grep "feat-ma" > /dev/null
            MAJOR_UPDATE_FOUND=$?

            if [[ $MAJOR_UPDATE_FOUND == "0" ]];
            then
              UPDATE_TYPE_1=major
              UPDATE_TYPE_2=major
            else
              echo "${{ env.COMMIT_MESSAGE_2 }}" | grep "feat-mi" > /dev/null
              MINOR_UPDATE_FOUND=$?

              if [[ $MINOR_UPDATE_FOUND == "0" ]];
              then
                UPDATE_TYPE_1=minor
                UPDATE_TYPE_2=minor
              else
                echo "${{ env.COMMIT_MESSAGE_2 }}" | grep "bugfix" > /dev/null
                BUGFIX_UPDATE_FOUND=$?

                if [[ $BUGFIX_UPDATE_FOUND == "0" ]];
                then
                  UPDATE_TYPE_1=patch
                  UPDATE_TYPE_2=bugfix             
                else
                  echo "${{ env.COMMIT_MESSAGE_2 }}" | grep "hotfix" > /dev/null
                  HOTFIX_UPDATE_FOUND=$?

                  if [[ $HOTFIX_UPDATE_FOUND == "0" ]];
                  then
                    UPDATE_TYPE_1=patch
                    UPDATE_TYPE_2=hotfix                  
                  else
                    echo "${{ env.COMMIT_MESSAGE_2 }}" | grep "docfix" > /dev/null
                    DOCFIX_UPDATE_FOUND=$?

                    if [[ $DOCFIX_UPDATE_FOUND == "0" ]];
                    then
                      UPDATE_TYPE_1=none
                      UPDATE_TYPE_2=docfix
                    else
                      echo "|"
                      echo "| Error: Invalid commit message"
                      echo "|"
                      echo "| Commit message must follow the format '<type>/<message>'."
                      echo "| Where 'type' can be feat-ma, feat-mi, bugfix, hotfix or docfix."
                      echo "|"
                    fi
                  fi
                fi
              fi
            fi

            echo "UPDATE_TYPE_1=$UPDATE_TYPE_1" >> $GITHUB_ENV
            echo "UPDATE_TYPE_2=$UPDATE_TYPE_2" >> $GITHUB_ENV

            echo UPDATE_TYPE_1=$UPDATE_TYPE_1
            echo UPDATE_TYPE_2=$UPDATE_TYPE_2
          }

          set +e
          define_update_type
          set -e

      ###############################################################
      # GENERATE NEXT VERSION TAG
      ###############################################################  
      - name: Generate Next Version Tag
        id: generate-next-version-tag
        if: ${{ steps.define-update-type.outcome == 'success' }}
        run: |
          generate_next_version_tag() {
            CURRENT_VERSION_TAG=$(git tag --list --sort=creatordate | tail -n 1 | sed -e "s|v||")

            CURRENT_VERSION_MAJOR=$(echo $CURRENT_VERSION_TAG | cut -d '.' -f 1)
            CURRENT_VERSION_MINOR=$(echo $CURRENT_VERSION_TAG | cut -d '.' -f 2)
            CURRENT_VERSION_PATCH=$(echo $CURRENT_VERSION_TAG | cut -d '.' -f 3)

            if [[ ${{ env.UPDATE_TYPE_1 }} == "major" ]];
            then
              NEXT_VERSION_MAJOR=$((CURRENT_VERSION_MAJOR + 1))
              NEXT_VERSION_MINOR=0
              NEXT_VERSION_PATCH=0
            elif [[ ${{ env.UPDATE_TYPE_1 }} == "minor" ]];
            then
              NEXT_VERSION_MAJOR=$CURRENT_VERSION_MAJOR
              NEXT_VERSION_MINOR=$((CURRENT_VERSION_MINOR + 1))
              NEXT_VERSION_PATCH=0
            else
              if [[ ${{ env.UPDATE_TYPE_1 }} == "patch" ]];
              then
                NEXT_VERSION_MAJOR=$CURRENT_VERSION_MAJOR
                NEXT_VERSION_MINOR=$CURRENT_VERSION_MINOR
                NEXT_VERSION_PATCH=$((CURRENT_VERSION_PATCH + 1))
              else
                NEXT_VERSION_MAJOR=$CURRENT_VERSION_MAJOR
                NEXT_VERSION_MINOR=$CURRENT_VERSION_MINOR
                NEXT_VERSION_PATCH=$CURRENT_VERSION_PATCH
              fi
            fi

            NEXT_VERSION="$NEXT_VERSION_MAJOR.$NEXT_VERSION_MINOR.$NEXT_VERSION_PATCH"
            echo $NEXT_VERSION
          }

          set +e
          git fetch --tags
          git tag --list | grep "v" > /dev/null
          GIT_TAGS_FOUND=$?
          echo "GIT_TAGS_FOUND=$GIT_TAGS_FOUND" >> $GITHUB_ENV

          if [[ $GIT_TAGS_FOUND == "0" ]];
          then
            echo "Git tags found."
            echo ""
            echo "Existing Versions:"
            echo "------------------"
            git tag --list --sort=creatordate | grep "v"
            echo ""

            echo CURRENT_VERSION_TAG="$(git tag --list --sort=creatordate | tail -n 1)"
            echo NEXT_VERSION_TAG=v"$(generate_next_version_tag)"

            echo "CURRENT_VERSION_TAG=$(git tag --list --sort=creatordate | tail -n 1)" >> $GITHUB_ENV   
            echo "NEXT_VERSION_TAG=v$(generate_next_version_tag)" >> $GITHUB_ENV
          else
            echo "No Git tags found"
            echo "Preparing to tag initial release version"
            echo NEXT_VERSION_TAG=v1.0.0
            echo "NEXT_VERSION_TAG=v1.0.0" >> $GITHUB_ENV
          fi
          set -e

      ###############################################################
      # UPDATE CHANGELOG
      ###############################################################  
      - name: Update Changelog
        id: update-changelog
        if: ${{ steps.generate-next-version-tag.outcome == 'success' }}
        run: |
          DATE=$(date +%m-%d-%Y)

          generate_changelog_message() {
            if [[ ${{ env.UPDATE_TYPE_2 }} == "major" ]];
            then
              CHANGELOG_HEADING="Feature (Major)"
              CHANGELOG_MESSAGE=$(echo "${{ env.COMMIT_MESSAGE_2 }}" | sed -e "s|feat-ma/||")
            elif [[ ${{ env.UPDATE_TYPE_2 }} == "minor" ]];
            then
              CHANGELOG_HEADING="Feature (Minor)"
              CHANGELOG_MESSAGE=$(echo "${{ env.COMMIT_MESSAGE_2 }}" | sed -e "s|feat-mi/||")
            else
              if [[ ${{ env.UPDATE_TYPE_2 }} == "bugfix" ]];
              then
                CHANGELOG_HEADING="Patch (Bugfix)"
                CHANGELOG_MESSAGE=$(echo "${{ env.COMMIT_MESSAGE_2 }}" | sed -e "s|bugfix/||")
              elif [[ ${{ env.UPDATE_TYPE_2 }} == "hotfix" ]];
              then
                CHANGELOG_HEADING="Patch (Hotfix)"
                CHANGELOG_MESSAGE=$(echo "${{ env.COMMIT_MESSAGE_2 }}" | sed -e "s|hotfix/||")
              else
                CHANGELOG_HEADING="Docfix"
                CHANGELOG_MESSAGE=$(echo "${{ env.COMMIT_MESSAGE_2 }}" | sed -e "s|docfix/||")
              fi
            fi

            echo ""
            echo CHANGELOG_HEADING=$CHANGELOG_HEADING
            echo CHANGELOG_MESSAGE=$CHANGELOG_MESSAGE
            echo ""                  
          }

          if [[ ${{ env.GIT_TAGS_FOUND }} == "0" ]];
          then
            generate_changelog_message

            cat >> /tmp/CHANGELOG.md<< EOF
          # Changelog

          All notable changes to this module will be documented in this file.

          ## ${{ env.NEXT_VERSION_TAG }} ($DATE)

          ### $CHANGELOG_HEADING
          * $CHANGELOG_MESSAGE

          EOF

            cp CHANGELOG.md /tmp/CHANGELOG-2.md
            sed -i '1,4d' /tmp/CHANGELOG-2.md
            echo "$(cat /tmp/CHANGELOG-2.md)" >> /tmp/CHANGELOG.md
            cat /tmp/CHANGELOG.md
            mv /tmp/CHANGELOG.md CHANGELOG.md
          else
            cat >> CHANGELOG.md<< EOF
          # Changelog

          All notable changes to this module will be documented in this file.

          ## ${{ env.NEXT_VERSION_TAG }} ($DATE)
          
          ### Initial release
          * Initial release version

          EOF
          fi

      ###############################################################
      # UPDATE README
      ###############################################################
      - name: Update README
        id: update-readme
        if: ${{ steps.update-changelog.outcome == 'success' }}
        env:
          BANNER_URL: https://github.com/apacheplayground/terraform-aws-s3-webserver/blob/main/assets/banner.jpg
        run: |
          sed -i "s|\./assets/banner\.jpg|${{ env.BANNER_URL }}|g" README.md

      ###############################################################
      # COMMIT $ PUSH UPDATES
      ############################################################### 
      - name: Commit and Push Updates
        id: commit-and-push-updates
        if: ${{ steps.update-readme.outcome == 'success' }}
        run: |
          git status
          git add .
          git commit -m ${{ env.COMMIT_MESSAGE_3 }}
          git push origin

      ###############################################################
      # TAG $ PUSH NEXT VERSION
      ###############################################################
      - name: Tag and Push Next Version
        id: tag-and-push-next-version
        if: ${{ steps.commit-and-push-updates.outcome == 'success' && env.UPDATE_TYPE_1 != 'none' }}
        run: |
          git tag -a ${{ env.NEXT_VERSION_TAG }} HEAD -m ${{ env.COMMIT_MESSAGE_3 }}
          git push origin ${{ env.NEXT_VERSION_TAG }}

      ###############################################################
      # MOVE CURRENT VERSION TAG TO LATEST COMMIT
      ###############################################################
      - name: Move Current Version Tag to Latest Commit
        id: move-current-version-tag-to-latest-commit
        if: ${{ steps.commit-and-push-updates.outcome == 'success' && env.UPDATE_TYPE_1 == 'none' }}
        run: |
          CURRENT_VERSION_COMMIT_MSG=$(git log --format=%B -n 1 HEAD~1)

          git tag -d ${{ env.CURRENT_VERSION_TAG }}
          git tag -a ${{ env.CURRENT_VERSION_TAG }} HEAD -m "$CURRENT_VERSION_COMMIT_MSG docfix"
          git push --force origin ${{ env.CURRENT_VERSION_TAG }}

######################################## APACHEPLAYGROUND™ ########################################